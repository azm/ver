# Encoding: UTF-8

[{beforeRunningCommand: "nop",
  command: 
   "require_cmd dsss\n\n. \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\nhtml_header \"${TM_FILENAME}\"\n\ncd \"$TM_PROJECT_DIRECTORY\"\n\necho '<h2>Building...</h2>'\n\ndsss build 2>&1 | grep -v 'indirect jmp without' | grep -vE 'Default prefix .+ is unwritable, using .+ instead' | pre\n\nhtml_footer\n",
  input: "none",
  keyEquivalent: "@b",
  name: "Build",
  output: "showAsHTML",
  scope: "source.d",
  uuid: "BB84553C-7D75-4D17-9E49-FADADC13F187"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd dsss\ndsss build \"$TM_FILEPATH\" 2>&1 | grep -v 'indirect jmp without' | grep -vE 'Default prefix .+ is unwritable, using .+ instead' | pre",
  input: "none",
  keyEquivalent: "~@b",
  name: "Build Current File",
  output: "showAsHTML",
  scope: "source.d",
  uuid: "49187E65-D29E-4E5F-8DAD-2C0FDEB0AA5F"},
 {beforeRunningCommand: "nop",
  command: "require_cmd dsss\ndsss clean \"$TM_DIRECTORY\" | pre",
  input: "none",
  keyEquivalent: "^~@c",
  name: "Clean",
  output: "showAsHTML",
  scope: "source.d",
  uuid: "6CBFA0E9-56C7-4B65-9358-8B7732F1E7C5"},
 {beforeRunningCommand: "saveActiveFile",
  command: 
   ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\nhtml_header \"${TM_FILENAME}\"\n\ncd \"$TM_DIRECTORY\"\n\necho '<h2>Compiling...</h2>'\n\nOUT=$(gdmd -debug -unittest -gc -od$TMPDIR \"$TM_FILENAME\" 2>&1)\n\nif [ $? -eq 0 ] ; then\n  echo $OUT | grep -v 'indirect jmp without'\n  echo '<h2>Running...</h2>'\n  BIN=\"$(echo \"$TM_FILENAME\"|sed 's/\\.d$//g')\"\n  ./\"$BIN\" | pre\n  rm -f $BIN\nelse\n  echo $OUT | grep -v 'indirect jmp without' | pre\nfi\n\nhtml_footer\n",
  input: "none",
  keyEquivalent: "@r",
  name: "Compile & Run Single File",
  output: "showAsHTML",
  scope: "source.d",
  uuid: "CC26BACA-2BA5-4179-A05E-DB80360440E6"},
 {beforeRunningCommand: "nop",
  command: 
   "#!/usr/bin/env ruby -wKU\n\nrequire \"\#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes\"\nrequire \"\#{ENV['TM_SUPPORT_PATH']}/lib/escape\"\n\nmethod_name = ENV[\"TM_SELECTED_TEXT\"] || ENV[\"TM_CURRENT_WORD\"] or\n  TextMate.exit_show_tool_tip(\n    \"Please type the new function's name or use the meâ‡¥ snippet.\"\n  )\n\nprint <<END_SNIPPET\nvoid \#{e_sn method_name}(\\${1:args}) {\n\t\\$0\n}\nEND_SNIPPET\n",
  fallbackInput: "word",
  input: "selection",
  keyEquivalent: "$\n",
  name: "New Method",
  output: "insertAsSnippet",
  scope: "source.d",
  uuid: "7EB57A38-809C-464D-8025-CE990B100488"}]
