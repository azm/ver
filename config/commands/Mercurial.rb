# Encoding: UTF-8

[{beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\"${TM_RUBY:-ruby}\" -r \"$TM_SUPPORT_PATH/lib/shelltokenize.rb\" <<END\n\thg = ENV['TM_HG'] || \"hg\"\n\tputs %x{\#{hg} add \#{TextMate.selected_paths_for_shell}}\nEND\n\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Add",
  output: "showAsTooltip",
  uuid: "A6F3AB3E-FB21-4E93-B672-E41100E88E41"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n$TM_HG add\n$TM_HG remove --after\n\n",
  input: "none",
  keyEquivalent: "^M",
  name: "AddRemove",
  output: "showAsTooltip",
  uuid: "865D7DE7-A07B-47C1-AEDC-4A88317A0EB1"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\"$TM_HG\" annotate -nud \"$TM_FILEPATH\" 2>&1 \\\n|\"${TM_RUBY:-ruby}\" -- \"${TM_BUNDLE_SUPPORT}/format_annotate.rb\"",
  input: "none",
  keyEquivalent: "^M",
  name: "Annotate",
  output: "showAsHTML",
  uuid: "2593B8FB-279E-4BD1-8935-0D9B1699526F"},
 {beforeRunningCommand: "saveModifiedFiles",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nexport TM_HG\nexport CommitWindow=\"$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow\"\n\ncd \"${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}\"\n\"${TM_RUBY:-ruby}\" -- \"${TM_BUNDLE_SUPPORT}/hg_commit.rb\"",
  input: "none",
  keyEquivalent: "^M",
  name: "Commit",
  output: "showAsHTML",
  uuid: "A6254651-3866-4F78-8774-10FA1C1D7A6B"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\nfi\n\nrevs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\t2> >(CocoaDialog progressbar --indeterminate \\\n\t\t--title \"Diff Revisions…\" \\\n\t\t--text \"Retrieving List of Revisions…\" \\\n\t))\n\nrevs=`osascript <<END\n\tset theResult to false\n\tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\ttell app \"SystemUIServer\"\n\t\tactivate\n\t\tset ourList to (every text item of \"$revs\")\n\t\tif the count of items in ourList is 0 then\n\t\t\tdisplay dialog \"No revisions of file '$TM_FILENAME' found\" buttons (\"Continue\") default button 1\n\t\telse\n\t\t\ttell app \"SystemUIServer\" to choose from list (every text item of \"$revs\") with prompt \"Please choose two revisions of '$TM_FILENAME':\" with multiple selections allowed\n\n\t\t\tset theitems to the result\n\t\t\tif theitems is not false then\n\t\t\t\tif the count of items in the theitems is less than 2 then\n\t\t\t\t\tdisplay dialog \"Please select two revisions (hold down the shift key to select multiple revisions).\" buttons (\"Continue\") default button 1\n\t\t\t\telse\n\t\t\t\t\tset theResult to (item 1 of theitems) & return & (item 2 of theitems)\n\t\t\t\tend if\n\t\t\tend if \n\t\tend if\n\t\tset the result to theResult\n\tend tell\nEND`\n\n# exit if user canceled\nif [[ $revs = \"false\" ]]; then\n\tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\nfi\n\n\nrevs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\nrevs=( $revs )\n\n\n\nrev1=${revs[0]#r}\nrev2=${revs[1]#r}\n\n\"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\tif ENV['TM_HG_EXT_DIFF']\n\t\trequire 'hg_extdiff'\n\telse\n\t\trequire 'hg_diff'\n\tend\n\tMercurial::diff_active_file(\"-r$rev2 -r$rev1\", \"Diff Revisions…\")\nEND\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Diff Revisions...",
  output: "openAsNewDocument",
  uuid: "A60EB1AE-66C8-4791-940B-6601635A7899"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\nfi\n\n\"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\tif ENV['TM_HG_EXT_DIFF']\n\t\trequire 'hg_extdiff'\n\telse\n\t\trequire 'hg_diff'\n\tend\n\tMercurial::diff_active_file(\"-r tip\", \"Diff With Tip\")\nEND\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Diff with Newest (Tip)",
  output: "openAsNewDocument",
  uuid: "F56EB32C-F574-4865-83BF-976D8A826FC1"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\nfi\n\nrevs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\t2> >(CocoaDialog progressbar --indeterminate \\\n\t\t--title \"Diff Revisions…\" \\\n\t\t--text \"Retrieving List of Revisions…\" \\\n\t))\n\nrevs=`osascript<<END\n\tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\ttell app \"SystemUIServer\"\n\t\tactivate\n\t\tset ourList to (every text item of \"$revs\")\n\t\tif the count of items in ourList is 0 then\n\t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\t\t\tset the result to false\n\t\telse\n\t\t\tchoose from list ourList with prompt \"Diff '$(basename \"$TM_FILEPATH\")' with older revision:\"\n\t\tend if\n\tend tell\nEND`\n\n# exit if user canceled\nif [[ $revs = \"false\" ]]; then\n\tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\nfi\n\n\nrevs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\nrevs=( $revs )\n\n\"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\tif ENV['TM_HG_EXT_DIFF']\n\t\trequire 'hg_extdiff'\n\telse\n\t\trequire 'hg_diff'\n\tend\n\tMercurial::diff_active_file(\"-r${revs[0]#r}\", \"Diff With Revision…\")\nEND\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Diff with Revision…",
  output: "openAsNewDocument",
  uuid: "7D88D67B-C562-41DB-B25B-0AA8EAF3DC36"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\nfi\n\n\"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\tif ENV['TM_HG_EXT_DIFF']\n\t\trequire 'hg_extdiff'\n\telse\n\t\trequire 'hg_diff'\n\tend\n\tMercurial::diff_active_file(\"\", \"Diff With Working Copy\")\nEND",
  input: "none",
  keyEquivalent: "^M",
  name: "Diff with Working Copy",
  output: "openAsNewDocument",
  uuid: "D8C78EA6-68A7-4625-826A-C64E51EF0724"},
 {beforeRunningCommand: "nop",
  command: "\"${TM_RUBY:-ruby}\" \"$TM_BUNDLE_SUPPORT/hg_show_help.rb\"",
  input: "none",
  keyEquivalent: "^M",
  name: "Help",
  output: "showAsHTML",
  uuid: "296CC34F-72CA-4720-A77D-0452EEB3813C"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed Mercurial, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\ncd \"$TM_PROJECT_DIRECTORY\"\n\n\"${TM_RUBY:-ruby}\" -r \"$TM_SUPPORT_PATH/lib/shelltokenize.rb\" <<END\n\thg = ENV['TM_HG'] || \"hg\"\n\toutput = puts %x{\#{hg} init}\n\tputs output\nEND\n\n# will cause current file to be re-loaded\nrescan_project",
  input: "none",
  keyEquivalent: "^M",
  name: "Init",
  output: "showAsTooltip",
  uuid: "60838383-D23C-465B-9414-A1EC148F6D1D"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\"\nfi\n      \n: ${TM_RUBY:=ruby}\nFORMAT_LOG=\"${TM_BUNDLE_SUPPORT}/format_log.rb\"\nHG_STYLE=\"${TM_BUNDLE_SUPPORT}/map-log.changelog\"\n\nif [[ $TM_HG_LOG_LIMIT != 0 ]]\n\tthen HG_LIMIT=\"-l ${TM_HG_LOG_LIMIT:=10}\"\nfi\n\nHG_STYLE_TMP='\"$HG_STYLE\"'\nTM_HG_TMP='\"$TM_HG\"'\n\nif [[ -z $TM_SELECTED_FILES ]]; then\n   \"$TM_HG\" log $HG_LIMIT --style \"$HG_STYLE\" \"$TM_FILEPATH\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\"\nelse\n   eval \"$TM_HG_TMP\" log $HG_LIMIT --style \"$HG_STYLE_TMP\" \"$TM_SELECTED_FILES\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\"\nfi",
  input: "none",
  keyEquivalent: "^M",
  name: "Log",
  output: "showAsHTML",
  uuid: "DF26FEB2-2E2C-4764-B766-869113AF6E00"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\"\nfi\n      \n: ${TM_RUBY:=ruby}\nFORMAT_LOG=\"${TM_BUNDLE_SUPPORT}/format_log.rb\"\nHG_STYLE=\"${TM_BUNDLE_SUPPORT}/map-log.changelog\"\n\nif [[ $TM_HG_LOG_LIMIT != 0 ]]\n\tthen HG_LIMIT=\"-l ${TM_HG_LOG_LIMIT:=10}\"\nfi\n\nHG_STYLE_TMP='\"$HG_STYLE\"'\nTM_HG_TMP='\"$TM_HG\"'\n\nif [[ -z $TM_SELECTED_FILES ]]; then\n   \"$TM_HG\" log --debug $HG_LIMIT --style \"$HG_STYLE\" \"$TM_FILEPATH\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\"\nelse\n   eval \"$TM_HG_TMP\" log --debug $HG_LIMIT --style \"$HG_STYLE_TMP\" \"$TM_SELECTED_FILES\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\"\nfi",
  input: "none",
  keyEquivalent: "^M",
  name: "Log -v",
  output: "showAsHTML",
  uuid: "CFC80127-ED10-465E-9CCE-D9282FD7893D"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\nfi\n\nexport TM_HG\n\ncd \"${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}\"\n\"${TM_RUBY:-ruby}\" -- \"${TM_BUNDLE_SUPPORT}/hg_pull.rb\"\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Pull from default repo",
  output: "showAsTooltip",
  uuid: "46E15B5C-A621-48E5-AD2B-A893532695A6"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\nfi\n\nexport TM_HG\n\ncd \"${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}\"\n\"${TM_RUBY:-ruby}\" -- \"${TM_BUNDLE_SUPPORT}/hg_push.rb\"\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Push to default repo",
  output: "showAsTooltip",
  uuid: "75575B16-87B9-40A3-9101-B027DD43D31F"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\"${TM_RUBY:-ruby}\" -r \"$TM_SUPPORT_PATH/lib/shelltokenize.rb\" <<END\n\thg = ENV['TM_HG'] || \"hg\"\n\tputs %x{\#{hg} remove \#{TextMate.selected_paths_for_shell}}\nEND",
  input: "none",
  keyEquivalent: "^M",
  name: "Remove",
  output: "showAsTooltip",
  uuid: "0210BC81-D701-4836-A188-42D9A79F292B"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -z $TM_SELECTED_FILES ]]; then\n   \"$TM_HG\" revert \"$TM_FILEPATH\"\nelse\n   eval \"$TM_HG\" revert $TM_SELECTED_FILES\nfi\n\n# will cause current file to be re-loaded\nrescan_project\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Revert",
  output: "showAsTooltip",
  uuid: "819B19AC-758D-42CB-903F-73A5EDD716BD"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nrevs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\t2> >(CocoaDialog progressbar --indeterminate \\\n\t\t--title \"Revert to Revision…\" \\\n\t\t--text \"Retrieving List of Revisions…\" \\\n\t))\n\nrevs=`osascript<<END\n\tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\ttell app \"SystemUIServer\"\n\t\tactivate\n\t\tset ourList to (every text item of \"$revs\")\n\t\tif the count of items in ourList is 0 then\n\t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\t\t\tset the result to false\n\t\telse\n\t\t\tchoose from list ourList with prompt \"Revert '$(basename \"$TM_FILEPATH\")' to revision:\"\n\t\tend if\n\tend tell\nEND`\n\n# exit if user canceled\nif [[ $revs = \"false\" ]]; then\n\tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\nfi\n\n\nrevs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\nrevs=( $revs )\n\nif [[ -z $TM_SELECTED_FILES ]]; then\n   \"$TM_HG\" revert -r \"${revs[0]#r}\" \"$TM_FILEPATH\"\nelse\n   eval \"$TM_HG\" revert -r \"${revs[0]#r}\" $TM_SELECTED_FILES\nfi\n\n# will cause current file to be re-loaded\nrescan_project\n\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Revert to Revision...",
  output: "showAsTooltip",
  uuid: "59DD3EDA-43DB-4819-8C50-CCBBEED5B0F7"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\"\nfi\n\nexport CommitWindow=\"$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow\"\n\n# show it..\n\n\"${TM_RUBY:-ruby}\" -r \"$TM_SUPPORT_PATH/lib/shelltokenize.rb\" <<END\n\thg = ENV['TM_HG'] || \"hg\"\n\tputs %x{\#{hg} status --debug \#{TextMate.selected_paths_for_shell} 2>&1|\"${TM_RUBY:-ruby}\" -KU -- \"${TM_BUNDLE_SUPPORT}/format_status.rb\" \"--status\"}\nEND\n\n",
  input: "none",
  keyEquivalent: "^M",
  name: "Status",
  output: "showAsHTML",
  uuid: "ED977BA9-3604-4EC9-999B-39C588CD4801"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n$TM_HG rollback",
  input: "none",
  keyEquivalent: "^M",
  name: "Undo",
  output: "showAsTooltip",
  uuid: "11743544-9E2A-49BF-BA5D-655EAD6445AA"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\nfi\n\n\ncd \"${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}\"\n\"${TM_RUBY:-ruby}\" -- \"${TM_BUNDLE_SUPPORT}/hg_update.rb\"\n\n\n\n# will cause current file to be re-loaded\nrescan_project",
  input: "none",
  keyEquivalent: "^M",
  name: "Update",
  output: "showAsHTML",
  uuid: "B797AE83-EABD-4BB7-AD20-0FB24F824343"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\";\nfi\n\nrevs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\t2> >(CocoaDialog progressbar --indeterminate \\\n\t\t--title \"View Revision…\" \\\n\t\t--text \"Retrieving List of Revisions…\" \\\n\t))\n\nrevs=`osascript<<END\n\tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\ttell app \"SystemUIServer\"\n\t\tactivate\n\t\tset ourList to (every text item of \"$revs\")\n\t\tif the count of items in ourList is 0 then\n\t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\t\t\tset the result to false\n\t\telse\n\t\t\tchoose from list ourList with prompt \"View older revision of '$(basename \"$TM_FILEPATH\")':\"\n\t\tend if\n\tend tell\nEND`\n\n# exit if user canceled\nif [[ $revs = \"false\" ]]; then\n\tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\nfi\n\nrevs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\nrevs=( $revs )\n\nFILENAME=\"/tmp/rev${revs[0]}-$TM_FILENAME\"\n\n\"$TM_HG\" cat -r${revs[0]} --output \"$FILENAME\" \"$TM_FILEPATH\"\nopen -a \"TextMate\" \"$FILENAME\"\n",
  input: "none",
  keyEquivalent: "^M",
  name: "View Revision...",
  output: "discard",
  uuid: "83F27190-D52F-414C-8AC8-7ED3ADAF2FC6"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\"\nfi\n      \n: ${TM_RUBY:=ruby}\nFORMAT_LOG=\"${TM_BUNDLE_SUPPORT}/format_log.rb\"\nHG_STYLE=\"${TM_BUNDLE_SUPPORT}/map-incoming.changelog\"\n\n\n\"$TM_HG\" incoming -v --style \"$HG_STYLE\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\" \"--in\"\n",
  input: "none",
  keyEquivalent: "^M",
  name: "incoming",
  output: "showAsHTML",
  uuid: "C8F5F526-4ED5-4E75-A0D1-D9B5143B20EE"},
 {beforeRunningCommand: "nop",
  command: 
   "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\nif [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\"\nfi\n      \n: ${TM_RUBY:=ruby}\nFORMAT_LOG=\"${TM_BUNDLE_SUPPORT}/format_log.rb\"\nHG_STYLE=\"${TM_BUNDLE_SUPPORT}/map-log.changelog\"\n\n\n\"$TM_HG\" outgoing -v --style \"$HG_STYLE\" 2>&1 |\"$TM_RUBY\" -- \"$FORMAT_LOG\" \"--out\"\n",
  input: "none",
  keyEquivalent: "^M",
  name: "outgoing",
  output: "showAsHTML",
  uuid: "25A113EB-AA3B-40F0-B30E-ED2C2F9866C0"}]
